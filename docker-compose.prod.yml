version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: credit-cashflow-engine-api:latest
    restart: always
    env_file:
      - .env
    environment:
      - ENV=production
      - LOG_LEVEL=info
      - WORKERS=4
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - ./logs:/app/logs
    command: gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --timeout 120

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: credit-cashflow-engine-worker:latest
    restart: always
    env_file:
      - .env
    environment:
      - ENV=production
      - CELERY_TASK_ALWAYS_EAGER=False
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    depends_on:
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - ./logs:/app/logs
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=4 --max-tasks-per-child=1000

  redis:
    image: redis:7.2-alpine
    restart: always
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  flower:
    image: mher/flower:1.2
    restart: always
    ports:
      - "5555:5555"
    environment:
      - FLOWER_BROKER=redis://redis:6379/0
    depends_on:
      - redis
      - worker

  prometheus:
    image: prom/prometheus:v2.47.0
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:10.2.0
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  hastructure:
    image: yellowbean/hastructure:latest
    restart: always
    ports:
      - "8081:8081"
    environment:
      - MODE=Production
      - MAX_POOL_SIZE=10
      - TIMEOUT_SECS=300
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - ./hastructure_data:/app/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
